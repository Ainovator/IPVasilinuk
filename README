Решение:

Не придумал решения лаконичнее, чем (O n^2). 
Пробежался по всей матрице, проверял соседей на значение (1) увеличвал counter и сбарасывал на каждой итерации, 
если counter превышает заданное значение количества соседей то записываю координаты нуля и всех соседей (1) для данного нуля,
в изначальном варианте просто суммировал к counter значение соседа.

Видоизменение:

1. Решил сделать матрицу динамичной и заполнять сразу в конструкторе, чтобы поиграться.
2. Сделал количество необходимых соседей также динамичным.
3. Первую кнопку сделал, чтобы подсвечивать найденные нули
4. Вторую кнопку оставил по ТЗ, просто выкидывает Alert окно с информационным сообщением
5. Третья кнопка подсвечивает соседей единиц, для найденного нуля

Не стал делать закрашивание всех ячеек цветом, так как тогда потерялся бы смысл в подсвечивании нулей и соседей.

Возможное решение:

Возможно имелось ввиду решение через графы и для каждой вершины хранить связь с соседом являющимся единецей. 

P.S

В классе MatrixModel остались рудиментные методы вроде (getLeftNeighbour и т.д.). Использовал при подробном решении.

Если будете тестировать, не забудьте выполнить (composer install, composer-dumpautoload) после клонирования репозитория, так как использовать автозагрузку классов PSR-4.
